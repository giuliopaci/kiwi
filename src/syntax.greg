%{
#include "bstrlib.h"
#include "list.h"
#include "content.h"
#include "kiwi.h"
#include "io.h"
#include "parse.h"
#include "stack.h"
#include "private-kiwi.h"

#define YY_noDEBUG 1
#define YY_INPUT(buf, result, max_size, D) handle_input(G->data, buf, &result, max_size)

#define RUN_ACTION(name) name(G->data, yyleng, yytext)
%}

# High-level
page =  pre_block | wikitext_line | wikitext
wikitext_line = paragraph | horizontal_line
wikitext = nowiki | noinclude | comment | html | table_of_contents | template_variable | template | heading | list | formatting | image | link | table | angle_brackets | html_hex_code | ampersand | anything_else | eol { append_to_tag_content(G->data, "%c", '\n'); }

# Generally useful rules
eol = '\r'? '\n' { ((_kw_t*)G->data)->start_of_line = 1; }
eof = !.
space = [\t ]

# Headings
heading = heading_marker                                                       { RUN_ACTION(heading_action_1); }
  space* heading_text heading_marker? space* ( eol | eof )                     { RUN_ACTION(heading_action_2); }
heading_text = < ( !heading_marker ( formatting | link | anything_else ) )* >
heading_marker = < '=' '='+ >                                                  { if(((_kw_t*)G->data)->current_header_level == 0) ((_kw_t*)G->data)->current_header_level = (yyleng > 5) ? 5 : yyleng; }

# Paragraph
paragraph = wikitext eol eol+                                                  { bprintf(G->data, "</p>\n<p>"); }
horizontal_line = &{ ((_kw_t*)G->data)->start_of_line } "----" "-"*            { bprintf(G->data, "<hr/>\n"); ((_kw_t*)G->data)->start_of_line = 0; }

# Lists
list = &{ ((_kw_t*)G->data)->start_of_line } ( bullet_list | numbered_list | definition_list )
list_text = ( !eol ( < [*#:] > { bprintf(G->data, "%s", yytext); } | wikitext ) )*

# Bullet list
bullet_list =                                                                  { bprintf(G->data, "<ul>"); }
  bullet_list_entry+                                                           { RUN_ACTION(bullet_list_action_1); }
bullet_list_entry = bullet space*  list_text ( eol | eof )?
bullet = < '*'+ >                                                              { RUN_ACTION(bullet_action_1); ((_kw_t*)G->data)->start_of_line = 0; }

# Definition list (Indentation)
definition_list =                                                              { bprintf(G->data, "<dl>"); }
  definition_list_entry+                                                       { RUN_ACTION(definition_list_action_1); }
definition_list_entry = definition space*  list_text ( eol | eof )?
definition = < ':'+ >                                                          { RUN_ACTION(definition_action_1); ((_kw_t*)G->data)->start_of_line = 0; }

# Numbered list
numbered_list =                                                                { bprintf(G->data, "<ol>"); }
  numbered_list_entry+                                                         { RUN_ACTION(numbered_list_action_1); }
numbered_list_entry = numbered space* list_text ( eol | eof )?
numbered = < '#'+ >                                                            { RUN_ACTION(numbered_action_1); ((_kw_t*)G->data)->start_of_line = 0; }

# Formatting
formatting = bold_italic | bold | italic
bold_italic = "'''''"                                                          { append_to_tag_content(G->data, "<b><i>"); }
  ( !"'''''" wikitext )* "'''''"                                               { append_to_tag_content(G->data, "</i></b>"); }
bold = "'''"                                                                   { append_to_tag_content(G->data, "<b>"); }
  ( !"'''" wikitext )* "'''"                                                   { append_to_tag_content(G->data, "</b>"); }
italic = "''"                                                                  { append_to_tag_content(G->data, "<i>"); }
  ( !"''" wikitext )* "''"                                                     { append_to_tag_content(G->data, "</i>"); }

# pre-formatted blocks
pre_block = &{ ((_kw_t*)G->data)->start_of_line }                                                 { bprintf(G->data, "<pre>"); }
  pre_line+                                                                    { bprintf(G->data, "</pre>"); }
pre_line = ' ' < ( !eol . )* ( eol | eof ) >                                   { bprintf(G->data, "%s", yytext); }
comment = comment_open < ( !comment_close . )* >                               { RUN_ACTION(comment_action_1); ((_kw_t*)G->data)->start_of_line = 0; }
  comment_close
comment_open = comment_open_tag
comment_close = comment_close_tag
comment_open_tag = '<!--' 
comment_close_tag = '-->' | eof
nowiki = nowiki_open < ( !nowiki_close . )* >                                  { RUN_ACTION(nowiki_action_1); ((_kw_t*)G->data)->start_of_line = 0; }
  nowiki_close
nowiki_open = nowiki_open_tag | html_pre_open | html_code_open
nowiki_close = nowiki_close_tag | html_pre_close | html_code_close
nowiki_open_tag = '<nowiki>' 
nowiki_close_tag = '</nowiki>' 
html_pre_open = ( '<pre' ( !'>' . )* '>' | '<PRE>' )                           { append_to_tag_content(G->data, "<pre>"); }
html_pre_close = ( '</pre>' | '</PRE>' )                                       { append_to_tag_content(G->data, "</pre>"); }
html_code_open = ( '<code' ( !'>' . )* '>' | '<CODE>' )                        { append_to_tag_content(G->data, "<code>"); }
html_code_close = ( '</code>' | '</CODE>' )                                    { append_to_tag_content(G->data, "</code>"); }

# Links
link = ( local_link | external_link )                                          { ((_kw_t*)G->data)->start_of_line = 0; }
local_link = link_open ':'? namespace? link_path rename? link_close blend      { RUN_ACTION(local_link_action_1); }
namespace = < ( !':' !link_close . )* > ':'                                    { bformata(((_kw_t*)G->data)->link_path, "%s:", yytext); }
link_path = < ( !link_close !'|' . )* >                                        { bcatcstr(((_kw_t*)G->data)->link_path, yytext); bcatcstr(((_kw_t*)G->data)->link_text, yytext); }
rename = '|' < ( !link_close . )* >                                            { btrunc(((_kw_t*)G->data)->link_text, 0); bcatcstr(((_kw_t*)G->data)->link_text, yytext); }
blend = < ( !space !'=' !"''" ![<[{] !eol !eof . )* >                          { bcatcstr(((_kw_t*)G->data)->link_text, yytext); }

external_link = named_link | unnamed_link | url
named_link = open_named_link link_url                                          { append_to_tag_content(G->data, "\">");}
  ' '+ link_name + space* close_named_link
open_named_link = '[' !'javascript:'                                           { append_to_tag_content(G->data, "<a href=\""); } 
close_named_link = ']'                                                         { append_to_tag_content(G->data, "</a>"); }

link_url = < ( !' ' !']' . )+ >                                                { append_to_tag_content(G->data, "%s", yytext); }
link_name = < ( !']' . )+ >                                                    { append_to_tag_content(G->data, "%s", yytext); }

unnamed_link = '[' !'javascript:' < ( !']' . )* > ']'                          { append_to_tag_content(G->data, "<a href=\"%s\">%s</a>", yytext, yytext);}
url = protocol '://' < ( !eol !' ' . )* >                                      { append_to_tag_content(G->data, "<a href=\"%s://%s\">%s://%s</a>", ((_kw_t*)G->data)->protocol, yytext, ((_kw_t*)G->data)->protocol, yytext); }
protocol =  < ( 'http' | 'https' | 'ftp' ) >                                   { strcpy(((_kw_t*)G->data)->protocol, yytext); } 
link_open = '[['
link_close = ']]'

# Images
image = open_image { btrunc(((_kw_t*)G->data)->image_variables, 0); } file_indicator arguments? image_caption? close_image { RUN_ACTION(image_action_1); }

open_image = '[[' space*

close_image = space* ']]'
file_indicator = ( 'File:' | 'Image:' ) < ( !'|' !close_image . )* >           { bassignformat(((_kw_t*)G->data)->image_url, "%s", yytext); }
arguments = '|' ( special_image_variables | generic_variable value ) arguments?
special_image_variables = image_type | float | image_link | image_border
image_type = frame | thumb
frame = 'frame'                                                                { ((_kw_t*)G->data)->image_attributes |= IMAGE_FRAME; }
thumb = ( 'thumbnail' | 'thumb' )                                              { ((_kw_t*)G->data)->image_attributes |= IMAGE_THUMB; }
float = < ( 'left' | 'right' | 'center' ) >                                    { bformata(((_kw_t*)G->data)->image_variables, " class=\"float%s\"", yytext); }
  | 'none'
image_link = 'link=' < ( !'|' !close_image . )* >                              { RUN_ACTION(image_link_action_1); }
image_border = 'border'                                                        { ((_kw_t*)G->data)->image_attributes |= IMAGE_BORDER; }
generic_variable = < ( !'|' !'=' !close_image . )* >                           { bformata(((_kw_t*)G->data)->image_variables, "%s", yytext); }
value = '=' < ( !'|' !close_image . )* >                                       { bformata(((_kw_t*)G->data)->image_variables, "=\"%s\"", yytext); }
image_caption = '|' < ( !close_image . )+ >                                    { RUN_ACTION(image_caption_action_1); }

# Tables
table = table_open eol* table_caption? ( table_row | table_headers | pseudo_row )* eol* { brtrimws(((_kw_t*)G->data)->output_buffer); bprintf(G->data, "</table>"); } table_close?
table_specials = ( [|+}!] | '-' )
table_delims =  ( ( '|' table_specials ) | ( &{((_kw_t*)G->data)->start_of_line} '!' ) | ( &{((_kw_t*)G->data)->start_of_line} '|') )
table_open = '{|' space*                                                       { RUN_ACTION(table_open_action_1); }
  cell_attribute_list*                                                         { RUN_ACTION(table_open_action_2); }  

# -- caption
table_caption = '|+' space*                                                    { RUN_ACTION(table_caption_action_1); }
  ( cell_attribute_list space* '|' )*                                          { RUN_ACTION(table_caption_action_2); }
  ( !table_delims wikitext )* &table_delims                                    { RUN_ACTION(table_caption_action_3); }

# -- row
pseudo_row =                                                                   { bprintf(G->data, "<tr>\n"); }
  table_cell+                                                                  { bprintf(G->data, "</tr>\n"); /* Rows with no |- declaration first */ }
table_row = row_open ( simple_row | complex_row )
row_open = '|-' space*                                                         { ((_kw_t*)G->data)->tr_found = 1; bprintf(G->data, "<tr");  }
simple_row = [ \t]* eol                                                        { bprintf(G->data, ">"); }
  ( table_headers | table_cell )*                                              { bprintf(G->data, "</tr>"); }
complex_row = < ( !eol . )* > eol                                              { bprintf(G->data, " %s>", yytext); }
  ( table_headers | table_cell )*                                              { bprintf(G->data, "</tr>"); }

# -- cells
table_cell = ( sol_cell | inline_cell )
cell_attribute_list = ( ( cell_attribute | cell_junk ) space* )+               { RUN_ACTION(cell_attribute_list_action_1); }
cell_attribute = cell_attribute_name '=' cell_attribute_value
cell_attribute_name = < ( !eol !table_delims !'=' . )+ >                       { RUN_ACTION(cell_attribute_name_action_1); }
cell_attribute_value = '"' < ( !table_delims !['"] . )+ > '"'                  { RUN_ACTION(cell_attribute_value_action_1); }
cell_junk = < ( !( &table_delims ) !eol !'|' . )+ >
cell_close = &table_delims

# -- start of line cell
sol_cell = ( sol_cell_complex | sol_cell_simple )
sol_cell_open = &{((_kw_t*)G->data)->start_of_line} '|' !table_specials        { RUN_ACTION(sol_cell_open_action_1); }
sol_cell_complex = ( sol_cell_open cell_attribute_list
  space* '|' !'|' space* ( !table_delims wikitext )* cell_close? )             { RUN_ACTION(cell_close_action_1); }
sol_cell_simple  = ( sol_cell_open space*                                      { bprintf(G->data, ">"); }
  ( !table_delims wikitext )* cell_close? )                                    { RUN_ACTION(cell_close_action_1); }

# -- inline cell
inline_cell = ( inline_cell_complex | inline_cell_simple ) 
inline_cell_open = '||'                                                        { RUN_ACTION(inline_cell_open_action_1); }
inline_cell_complex = ( inline_cell_open cell_attribute_list
  space* '|' !'|' space* ( !table_delims wikitext )* cell_close? )             { RUN_ACTION(cell_close_action_1); }
inline_cell_simple = inline_cell_open space*                                   { bprintf(G->data, ">"); }
  ( !table_delims wikitext )* &table_delims                                    { brtrimws(((_kw_t*)G->data)->output_buffer); bprintf(G->data, "</td>"); }

table_close = '|}'

# -- headers
table_headers =                                                                { if(!((_kw_t*)G->data)->tr_found) bprintf(G->data, "<tr>"); }
  ( complex_header | simple_header )+                                          { if(!((_kw_t*)G->data)->tr_found) bprintf(G->data, "</tr>"); }
complex_header = &{((_kw_t*)G->data)->start_of_line} '!'                                          { RUN_ACTION(complex_header_action_1); }
  ( cell_attribute_list* space* '|'                                            { RUN_ACTION(complex_header_action_2); }
  space* ( !table_delims !eol wikitext )* ( &table_delims | eol ))             { bprintf(G->data, "</th>"); }

simple_header = &{((_kw_t*)G->data)->start_of_line} '!' space*                                    { bprintf(G->data, "<th>"); }
  ( !eol !table_delims wikitext )+ ( eol | &table_delims )                     { bprintf(G->data, "</th>");}

# Templates
template = &{!((_kw_t*)G->data)->template_noinclude} template_open space* template_name template_content? template_close
template_open = '{{'                                                           { kw_list_append_new(&((_kw_t*)G->data)->template_list); }
template_name = < ( !template_close !'|' . )* >                                { RUN_ACTION(template_name_action_1); }
template_content = '|' space* < ( !template_close template_nested? . )+ >      { RUN_ACTION(template_content_action_1); }
template_close = '}}'                                                          { RUN_ACTION(template_close_action_1); ((_kw_t*)G->data)->start_of_line = 0; }
template_variable = < '{{{' ( ! '}}}' !eol !eof . )* '}}}' >                   { bprintf(G->data, "%s", yytext); }
template_nested = template_nested_open template_nested_content template_nested_close
template_nested_open = '{{'
template_nested_close = '}}'
template_nested_content = ( !template_nested_close template_nested? . )*
noinclude = noinclude_open | noinclude_close
noinclude_open = ( '<noinclude>' | '<NOINCLUDE>' )                             { ((_kw_t*)G->data)->template_noinclude = 1; }
noinclude_close = ( '</noinclude>' | '</NOINCLUDE>' )                          { ((_kw_t*)G->data)->template_noinclude = 0; }

# Table of Contents
table_of_contents = ( notoc | toc | forcetoc )
notoc = '__NOTOC__'                                                            { ((_kw_t*)G->data)->toc_attributes |= TOC_NOTOC; }
forcetoc = '__FORCETOC__'                                                      { ((_kw_t*)G->data)->toc_attributes |= TOC_FORCETOC; }
toc = '__TOC__'                                                                { ((_kw_t*)G->data)->toc_attributes |= TOC_RELOC; bprintf(G->data, "__TOC__"); // pass-through for later }

# HTML markup
html = tag_open tag tag_attributes_list? tag_close
tag_open = '<'                                                                 { init_tag_vars(G->data); }
tag = < '/'? ( !tag_close_nocap !space . )+ >                                  { RUN_ACTION(tag_action_1); }
tag_attributes_list = ( space ( tag_attribute | tag_junk ) )+
tag_attribute = tag_attribute_name '=' tag_attribute_value
tag_attribute_name = < ( !'=' . )+ >                                           { RUN_ACTION(tag_attribute_name_action_1); }
tag_attribute_value = '"' < ( !tag_close_nocap !['"] . )+ > '"'                { RUN_ACTION(tag_attribute_value_action_1); }
tag_junk = < ( !tag_close_nocap . )+ >
tag_close = < tag_close_nocap >                                                { RUN_ACTION(tag_close_action_1); ((_kw_t*)G->data)->start_of_line = 0; }
tag_close_nocap = space* '/'? '>'

# -- loose angle brackets
angle_brackets = angle_left | angle_right
angle_left = '<'                                                               { bprintf(G->data, "&lt;"); ((_kw_t*)G->data)->start_of_line = 0; }
angle_right = '>'                                                              { bprintf(G->data, "&gt;"); ((_kw_t*)G->data)->start_of_line = 0; }

html_hex_code = ( '&#' [xX] < [0-9a-fA-F]+ > ';' )                             { bprintf(G->data, "&#x%02x;", strtol(yytext, NULL, 16)); ((_kw_t*)G->data)->start_of_line = 0; }
	      | ( '&#' < [0-9]+ > ';' )                                        { bprintf(G->data, "&#%d;", strtol(yytext, NULL, 10)); ((_kw_t*)G->data)->start_of_line = 0; }
ampersand = ( '&amp;' | '&' )                                                  { bprintf(G->data, "&amp;"); ((_kw_t*)G->data)->start_of_line = 0; }

# Other stuff
anything_else = < !eol . >                                                     { ((_kw_t*)G->data)->start_of_line = 0; append_to_tag_content(G->data, "%s", yytext); }

%%

// These have to be here to get access to the yy** vars
Kw* kw_init(void) {
  _kw_t* k;
  k = (Kw*) malloc(sizeof(_kw_t));
  k->g = yyparse_new(k);
  k->current_header_level = 0;
  k->start_of_line = 1;
  k->image_attributes = 0;
  k->toc_attributes = 0;
  k->in_tag = 0;
  k->input_buffer_pos = 0;
  k->template_list_iter = NULL;
  k->tr_found = 0;

  k->current_header_level = 0;
  k->current_bullet_list_level = 0;
  k->current_numbered_list_level = 0;
  k->current_definition_list_level = 0;

  memset(k->protocol, 0, 5);
  k->template_noinclude = 0;
  kw_list_init(&k->toc_list);
  kw_list_init(&k->tag_attributes_list);
  kw_list_init(&k->template_list);
  k->tag_content = bfromcstr("");
  k->tag_content_size = 0;
  balloc(k->tag_content, k->tag_content_size);

  k->image_variables = bfromcstr("");
  k->image_url = bfromcstr("");
  k->image_link_url = bfromcstr("");
  k->image_caption = bfromcstr("");

  k->link_path = bfromcstr("");
  k->link_text = bfromcstr("");

  k->output_buffer = bfromcstr("");
  k->input_buffer = bfromcstr("");
  balloc(k->output_buffer, 1 * MBYTE);

  k->base_url = bfromcstr("/");
  k->image_base_url = bfromcstr("");

  k->tag_name = bfromcstr("");
  k->tag_attribute = bfromcstr("");
  k->tag_attributes_validated = bfromcstr("");
  kw_stack_init(&k->tag_stack);
  return k;
}

void kw_cleanup(Kw* k) {
  _kw_t* kk = (_kw_t*)k;
  // These are already NULL safe
  bdestroy(kk->tag_content);
  bdestroy(kk->image_variables);
  bdestroy(kk->image_url);
  bdestroy(kk->image_link_url);
  bdestroy(kk->image_caption);
  bdestroy(kk->link_path);
  bdestroy(kk->link_text);
  bdestroy(kk->output_buffer);
  bdestroy(kk->input_buffer);
  bdestroy(kk->base_url);
  bdestroy(kk->image_base_url);
  bdestroy(kk->tag_name);
  bdestroy(kk->tag_attribute);
  bdestroy(kk->tag_attributes_validated);

  kw_stack_free(&kk->tag_stack);

  // Safe because we statically allocated the list structures
  kw_list_free(&kk->toc_list);
  kw_list_free(&kk->tag_attributes_list);
  kw_list_free(&kk->template_list);

  // Clean up after greg...
  yyparse_free(kk->g);
  free(kk);
}

int kw_low_level_parse(Kw* k) {
  return yyparse(((_kw_t*)k)->g);
}
